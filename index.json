[{"uri":"https://WuSphere.github.io/private/test-3/","title":"🔒 私人页面","tags":[],"description":"此页面受密码保护，仅限授权用户访问","content":"💡 面试C# 相关问题 Java 和 C# 的异步编程方式有何不同？何时适合使用异步编程？ Java:\n使用 Future、CompletableFuture（JDK 8+）、Reactive Streams（RxJava, Project Reactor）。 C#: 依赖 async/await 关键字和 Task 并行库（TPL）。 适用于 IO 密集型任务、UI 应用防止卡死、高并发服务器应用（如 ASP.NET Core）。 C# 中 class 和 struct 的区别？ 对比项 class（类） struct（结构体） 存储方式 堆（Heap） 栈（Stack）/封装类 默认行为 引用拷贝 值拷贝 构造函数 可定义无参构造 无默认构造 继承 支持继承和接口 仅支持接口 🔍 面试SQL Server 相关问题 影响 SQL Server 性能的主要因素？如何优化查询性能？ 影响因素：\n索引使用不当（缺失索引、冗余索引、不使用聚集索引）。 查询语句不优化（SELECT *、全表扫描）。 锁与阻塞（长事务占用资源）。 内存 \u0026amp; CPU 资源不足。 统计信息未更新（SQL 计划低效）。 优化方案：\n合理使用索引（主键索引、覆盖索引、分区索引）。 避免全表扫描（WHERE 过滤、优化 JOIN）。 减少事务锁定（降低事务粒度，NOLOCK 查询）。 定期更新统计信息（UPDATE STATISTICS）。 数据库分片 \u0026amp; Redis 缓存。 SQL Server 发生性能问题时的排查流程 SQL Server Profiler / Extended Events 进行实时监控。 sys.dm_exec_requests 查询当前执行请求。 DBCC SQLPERF(logspace) 查看日志增长情况。 执行计划（Execution Plan） 分析查询。 🔎 实际作业：修改共通处理的注意事项 ✅ 修改共通逻辑时的检查点\n影响范围分析：查看调用此方法的所有模块。 回归测试：确保修改不会影响其他功能。 性能测试：检查修改是否影响执行效率。 事务安全：涉及数据增删操作时需考虑回滚机制。 日志 \u0026amp; 监控：增加日志记录，方便排查错误。 ✅ 测试关键点\n单元测试（Unit Test） 确保改动点正常。 集成测试（Integration Test） 确保上下游接口正常。 回归测试（Regression Test） 检查是否影响现有功能。 异常情况测试（Edge Case） 模拟异常输入 \u0026amp; 系统压力情况。 "},{"uri":"https://WuSphere.github.io/","title":"Welcome to My World 🚀","tags":[],"description":"Explore my projects, blog, and knowledge base!","content":" 🌟 欢迎来到 WuSphere\u0026rsquo;s Hugo Site! 🎉 这里是一个用 Hugo + Relearn 搭建的个人网站！你可以在这里找到：\n📖 博客：分享技术、学习笔记和有趣的故事。 🚀 项目：展示我的个人项目、代码片段和开源贡献。 📚 资源：收集各种实用工具、文档和指南。 🔥 立即开始探索吧！\n🚀 进入博客 | 📂 查看项目| 📂 私人\n"},{"uri":"https://WuSphere.github.io/blog/","title":"博客文章","tags":[],"description":"所有文章汇总","content":"📝 这里是我的博客文章列表！\n"},{"uri":"https://WuSphere.github.io/blog/20250310-shellscript/","title":"我的第二篇博客","tags":[],"description":"测试博客文章","content":"[shell script]_ファイル一覧と行数をCSVファイルに出力する #!/usr/bin/bash #ファイルパスを指定する filePath=$\u0026#39;H:/GitLab/fukushisource/fukushisource/SourceFiles/QAA/WebUI\u0026#39; #行数を定義する（数値） declare -i filelines=0 #出力結果を格納する変数を定義する declare output=\u0026#34;\u0026#34; #改行を定義 LF=$\u0026#39;\\n\u0026#39; #フォルダを定義 folder=\u0026#34;\u0026#34; #ファイル名を定義 fileName=\u0026#34;\u0026#34; #拡張子を定義 expand=\u0026#34;\u0026#34; #フォルダ・ファイルごとに処理する while read -r strpath; do #パスがファイルであるかを判定する if test -f $strpath;then #ファイル名を取得する fileName=`basename $strpath` #拡張子を取得する expand=${strpath##*.} #CS・ASPX・XMLファイルの場合のみ後続の処理を行う case \u0026#34;$expand\u0026#34; in \u0026#34;cs\u0026#34; | \u0026#34;aspx\u0026#34; | \u0026#34;xml\u0026#34; |\u0026#34;CS\u0026#34; | \u0026#34;ASPX\u0026#34; | \u0026#34;XML\u0026#34; ) #対象ファイルの行数を数える filelines=`sed -n \u0026#39;$=\u0026#39; $strpath` #count=$(wc -l $strpath) #1回目の場合 if [ -z \u0026#34;$output\u0026#34; ];then output=\u0026#34;$strpath,$folder,$fileName,$filelines\u0026#34; #2回目以降の場合 else output=\u0026#34;$output$LF$strpath,$folder,$fileName,$filelines\u0026#34; fi esac else #パスの最後のディレクトリ名を抽出する #folder=`echo ${f} | awk -F \u0026#34;/\u0026#34; \u0026#39;{ print $NF }\u0026#39;` folder=`basename $strpath` fi #サブディレクトリを見ない #done \u0026lt; \u0026lt;(find ./hoge -mindepth 1 -maxdepth 1) #サブディレクトリを見る done \u0026lt; \u0026lt;(find $filePath -mindepth 1) #出力結果をcsvファイルに書き込み echo \u0026#34;$output\u0026#34; \u0026gt; output.csv "},{"uri":"https://WuSphere.github.io/blog/test-1/","title":"我的第二篇博客","tags":[],"description":"测试博客文章","content":"这是我的第一篇 Hugo 博客文章！\n"},{"uri":"https://WuSphere.github.io/projects/test-2/","title":"我的第二篇博客","tags":[],"description":"测试博客文章","content":"这是我的第一篇 Hugo 博客文章！\n"},{"uri":"https://WuSphere.github.io/projects/","title":"我的项目","tags":[],"description":"这里展示我的所有项目","content":"🚀 这里是我的项目合集！\n🔹 项目 1 🔹 项目 2 🔹 项目 3 "},{"uri":"https://WuSphere.github.io/private/","title":"私人","tags":[],"description":"私人存档","content":"📝 这里是我的博客文章列表！\n"},{"uri":"https://WuSphere.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://WuSphere.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]